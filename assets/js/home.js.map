{"version":3,"file":"home.js","sources":["home.coffee"],"names":["___components","app","config","controller","directive","factory","k","mconfig","module","provider","ref","slice","angular","app_name","dev","presentation","log_simbol_end_time","log_view_time","sails_time_to_declare_disconect","configs","modules","name","fn","arr_str_modules","key","smodule","push","arr_config","namem","$sailsProvider","autoConnect","useCORSRouteToGetCookie","$provide","controlActivities","activities","activity","countActivitiesActives","existsActivities","getActivitiesCreated","getActivitiesFinished","getActivity","getHistory","getPercent","historyActivities","logControlActivities","newActivity","refreshViews","rootScope","callback","callbacks","endCallBack","this","prototype","runAllCallBack","indexCallback","results","_error","endCallback","end","callbackEnd","created","finished","lastCountInactive","_list","console","log","Object","keys","length","nameActivity","callBackActivities","activityCreated","activityFind","countLast","result","$apply","$get","$rootScope","$interval","createRootScope","count","get","new","percent","$routeProvider","$locationProvider","route","path","keyPath","spath","otherwise","String","when","Array","isArray","warn","redirectTo","templateUrl","html5Mode","enable","requireBase","alert","alerts","modelAlert","type","message","_onLogs","onLog","newAlert","data","j","len","logs","copy","msg","removeAlert","indexAlert","splice","aArray","arrs","SArr","arr","arrReturn","index","indexSArr","header","preModule","separator","styles1","stylesErr","virtualLog","styles","color","getHeaderArr","createTagLog","tags","getHeaderInline","e","getHeader","join","i","ret","getSkeletonHeader","getNewTime","headerInline","n","preMsgs","s","Date","toLocaleTimeString","toLocaleDateString","msgs","arguments","call","apply","error","groups","error_add_groups","cModel","model","models","_validates","validate","add","dataToModel","fnValid","indexSPreModel","isPush","nameValid","preModel","sPreModel","remove","save","storage","ref1","search","active","actived","text","clear","exit","keyEvent","keyCode","domain","email","emailWeb","nameAndLastName","nameEmail","nameEmailWeb","web","regexp","isEmpty","value","useSymbol","symbol","valueFindSymbol","valueWithSymbol","indexOf","isEmail","Boolean","exec","name_controller","modules_param","fn_controller","$scope","$log","messages","verificData","clearAlertsFixed","indexAlerts","isDangerGroupKey","isValidGroupKey","logAddGroup","logRemoveAlerts","logSaveGroups","logValidationGroup","progressbarPropieties","removeAlertFixed","ruleValidaIfExistsOnGroups","ruleValidaIfExistsOnLocalGroups","ruleValidationIfCorrectSyntaxKeyGroup","saveAllGroupsAdds","validationGroup","is","title","alertsFixed","keyAlertDanger","groupsAdd","keyGroup","_keyGroup","existGroup","group","countExistGroup","expressionRun","isCorrectTheRegularExpression","isValid","isValidGroup","max","status","activitySaveAllGroups","activitySaveDbGroups","captureGroups","grupoKey","gruposErroneos","gruposListosParaGuardar","stringGruposErroneos","db","statusLoadSaveGroup","keyAlertCompleteUploadData","hsA","dangerKey","progressbar","validateKey","$http","bulkEmailToListAccounts","dangerValidation","logAddUser","logCatchingEmailsToAdd","logParseStringToEmailList","logSaveUsers","matchesFind","successValidation","usersAdd","usersAddlongText","regexToFindEmails","typeInvitation","toBulk","toSingle","users","resultMatchesRegExp","RegExp","match","regexpEnd","$watch","RegExpResult","RegExpResultNameAndLastname","contacto","contactosConEmailYWeb","contactosConNombreEmailYWeb","contactosConNombreYEmail","contactosSoloEmail","emailCapturado","firstName","isEmailAndName","isEmailAndWeb","isEmailNameAndWeb","isOnlyEmail","l","lastName","len1","len2","len3","len4","len5","listaDeContactosEncontrados","m","matchEmailAndName","matchEmailAndWeb","matchEmailNameAndWeb","matchNameAndLastName","matchOnlyEmail","nombreCapturado","o","p","q","tmpMemoriaDeContactosParaAgregar","webCapturado","lastname","reverse","dataNewUsers","d","v","$routeParams","$location","tab","type_adds","$sails","changeDataGroups","changeDataOficialByDB","logChageGlobalData","logControllerApp","logSaveGlobalData","logStatusConnectionApp","permissions","conectado","desconectado","setAppInDisconectOfTiemOut","sinEstado","timeToTimeoutConnect","appIsConnect","setTimeout","on","req","description","id","username","strNameData","dataGlobal","dataValue","indexDataValue","newData","oldData","countGroupToDB","logModuleUser","restrict","scope","fnNew","___min","___data","require","link","$element","$attrs","___addToData","nRepeatAddToData","template","element","attr","nameData","html","$$isFotter","$$isHeader","$$isMidlle","$parent","$index","$$remove","countActivities","history","location","protocol","host","pathname"],"mappings":"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","sourcesContent":["'use strict'\n\n# Fin Data\n\n# Include Service Angular\n# _service_angular_app.coffee\n\nif angular?\n\n  # Carga el archivo con las configuraciones de la app.\n  ###\n    Variables config\n  ###\n  config =\n  \n    # Nombre de la aplicación\n    app_name     : 'ajenjo'\n    dev          : true\n    presentation : true\n  \n  \n    # log config\n    log_simbol_end_time : ': '\n    log_view_time       : true\n  \n    # Sails Config\n    sails_time_to_declare_disconect : 5000\n  \n\n\n  # Contiene la memoria para los componentes\n  ___components =\n    configs   : []\n    # directive : []\n    modules   : []\n\n\n\n  # Service Modulos\n  # _service_angular_directive.coffee\n  #\n  # Genera directive\n  #\n  \n  directive = (name, fn) ->\n    app.directive name, fn\n  \n\n  # _service_angular_moduler.coffee\n  \n  # Permite cagar los modulos desde una fuente externa.\n  module =\n    module: (arr_str_modules) ->\n      for key, smodule of arr_str_modules\n        ___components.modules.push smodule\n      return module\n    config: (arr_config) ->\n      ___components.configs.push arr_config\n      return module\n  \n\n  # _service_angular_factory.coffee\n  #\n  # gestina las factory de la app\n  #\n  \n  factory = (name, fn) ->\n    app.factory name, fn\n  \n\n  # _service_angular_provider.coffee\n  \n  provider = (namem, fn) ->\n      app.provider name, fn\n  \n\n\n\n\n  ###  Modulos  ###\n  # _angular_ngSails.coffee\n  # _angular_ngSails.coffee\n  \n  module\n    .module [\n      'ngSails'\n    ]\n    .config [\n      '$sailsProvider'\n      ($sailsProvider) ->\n        # $sailsProvider.url = \"http://localhost:1337/\"\n        # $sailsProvider.url = \"/\"\n        $sailsProvider.autoConnect = true\n        $sailsProvider.useCORSRouteToGetCookie = true\n  \n  \n        # do ->\n        #   setAutorun = -> try do _sailsIoJSConnect\n  \n        #   setTimeout setAutorun, 5000\n  \n  \n    ]\n  \n  \n  \n  \n  \n  # _angular_ngSanitize.coffee\n  \n  module\n    .module [\n      'ngSanitize'\n    ]\n  \n  # _angular_provider_progressBar.coffee\n  \n  # Example:\n  #\n  # Crear una actividad\n  #\n  # ```coffeescript\n  # activity1 = controlActivities.new 'test_activity_n1'\n  # ```\n  #\n  # Con un evento callback\n  #\n  # ```coffeescript\n  # activity2 = controlActivities.new 'test_activity_n1', ->\n  #       console.log \"Saludos desde el evento callback.\"\n  # ```\n  #\n  # Agregar un callback a la actividad ya creada.\n  #\n  # ```coffeescript\n  # activity1.callback ->\n  #     console.log \"Saludos desde el callback agregado.\"\n  # ```\n  #\n  # Agregar un callback final, ayuda a crear eventos que solo se pueden ejecutar si un collback normal ya ha sido ejecutado y solo se puede ejecutar cuando la actividad se este cerrando con el metodo `end()`.\n  #\n  # ```coffeescript\n  # activity1.endCallback ->\n  #     console.log \"Cerrando la actividad.\"\n  # ```\n  #\n  # Finalizar una actividad\n  #\n  # ```coffeescript\n  # do activity1.end\n  # ```\n  #\n  \n  module\n    .config [\n      '$provide'\n      ($provide) ->\n        $provide.provider 'controlActivities', controlActivities = ->\n  \n          #\n          # | Activity             |\n          # | -------------------- |\n          # | - _callbacks:Array   |\n          # | -------------------- |\n          # | + callback: function |\n          #\n          class activity\n  \n            constructor : (callback, @callbacks = [], @endCallBack = []) ->\n              if callback?\n                @callback callback\n  \n            runAllCallBack : ->\n              try do callback for indexCallback, callback of @callbacks\n  \n            callback : (callback) ->\n              @callbacks.push callback\n  \n            endCallback : (callback) ->\n              @endCallBack.push callback\n  \n            end : ->\n              try do @runAllCallBack\n              try do callbackEnd for indexCallback, callbackEnd of @endCallBack\n  \n  \n  \n          activities =\n            created           : 0\n            finished          : 0\n            lastCountInactive : 0\n            _list: {\n              # object:activity\n            }\n  \n  \n  \n          historyActivities = []\n  \n  \n          logControlActivities = console.log\n  \n  \n          countActivitiesActives = -> Object.keys(activities._list).length\n          existsActivities       = -> do countActivitiesActives isnt 0\n          getActivitiesCreated   = -> activities.created\n          getActivitiesFinished  = -> activities.finished\n          newActivity            = (nameActivity, callBackActivities) ->\n            activityCreated = new activity callBackActivities\n  \n            if not activities._list[nameActivity]?\n              activities.created++\n              historyActivities.push activityCreated\n  \n              activityCreated.endCallback ->\n                logControlActivities.log \"Se esta finalizando la actividad #{nameActivity}.\"\n                activities.finished++\n  \n                delete activities._list[nameActivity]\n  \n                # Asociando el ultimo conteo actividades creadas\n                if not do existsActivities\n                  activities.lastCountInactive = activities.created\n  \n                # Refresca las vista\n                do refreshViews\n  \n              # Asocia la actividad a la lista\n              activities._list[nameActivity] = activityCreated\n  \n              # Evita replicas del evento\n              getActivity nameActivity\n            else\n              false\n  \n  \n  \n          getActivity = (nameActivity) ->\n            activityFind = activities._list[nameActivity]\n  \n            if not activityFind?\n              activityFind = newActivity nameActivity\n  \n            activityFind\n  \n  \n          getPercent = ->\n            created   = do getActivitiesCreated\n            finished  = do getActivitiesFinished\n            countLast = activities.lastCountInactive\n  \n            # Algoritmo resultante\n            result = (finished - countLast) / (created - countLast)\n            if not do existsActivities\n              1\n            else\n              result || 0\n  \n          getHistory = -> activities._list\n  \n          rootScope = null\n  \n          refreshViews = ->\n            do rootScope?.$apply?\n  \n          $get: [\n            '$rootScope'\n            'log'\n            '$interval'\n            ($rootScope, log, $interval) ->\n              logControlActivities = new log \"Control Activities\"\n  \n              createRootScope = ->\n                rootScope = $rootScope\n  \n              do createRootScope\n  \n              {\n                \"count\"    : countActivitiesActives\n                \"created\"  : getActivitiesCreated\n                \"finished\" : getActivitiesFinished\n                \"get\"      : getActivity\n                \"new\"      : newActivity\n                \"percent\"  : getPercent\n                activity\n                countActivitiesActives\n                existsActivities\n                getActivitiesCreated\n                getActivitiesFinished\n                getActivity\n                getHistory\n                getPercent\n                newActivity\n              }\n  \n          ]\n  \n    ]\n  \n  ### Module Route ###\n  \n  module\n    .module [\n      'ngRoute'\n    ]\n    .config [\n      '$routeProvider'\n      '$locationProvider'\n      ($routeProvider, $locationProvider) ->\n  \n        route = (path, config) ->\n  \n          # Ruta por defecto\n          if path == 'otherwise'\n            $routeProvider.otherwise config\n          else\n            # Si la ruta es un string\n            if typeof path is 'string' or path instanceof String\n              $routeProvider.when path, config\n            # Si la ruta es un Array\n            else if Array.isArray path\n              for keyPath, spath of path\n                route spath, config\n            else\n              console.warn \"El path\", path, \"requiere que sea un Array<String> o String.\"\n  \n        # Carga las rutas definidas\n        # Ejemplos\n        #\n        # route '/books/:book',\n        #   redirectTo: '/book2'\n        #\n        # route '/book2/:var/c',\n        #   soluto: factory: ->\n        #     console.log 'ok'\n        #\n        # route '/l/',\n        #   controller  : 'exampleController'\n        #   templateUrl : 'eltemplte.html'\n        #\n        \n        route 'otherwise',\n          redirectTo: '/home'\n        \n        route '/login_demo',\n          templateUrl : 'login_page'\n        \n        route '/home',\n          templateUrl : 'home_page'\n        \n        route '/groups',\n          templateUrl : 'groups_page'\n          controller  : 'groupsCtrl'\n        \n        route '/users',\n          templateUrl : 'users_page'\n          controller  : 'usersCtrl'\n        \n        route '/permissions',\n          templateUrl : 'permissions_page'\n          controller  : 'permissionCtrl'\n        \n        # Falso Rutas\n        route '/users/add',\n          redirectTo : '/add/user'\n        \n        route '/permissions/add',\n          redirectTo : '/add/permission'\n        \n        route '/groups/add',\n          redirectTo : '/add/group'\n        \n        # Adds\n        route '/add/user',\n          templateUrl : 'adds_page'\n          controller  : 'add_user'\n        \n        route '/add/group',\n          templateUrl : 'adds_page'\n          controller  : 'add_group'\n        \n        route '/add/permission',\n          templateUrl : 'adds_page'\n          controller  : 'add_permission'\n        \n        \n        \n  \n  \n  \n        $locationProvider.html5Mode\n          enable: false\n          requireBase: false\n    ]\n  \n  # # _angular_saveDb.coffee\n  \n  # module\n  #   # .module [\n  #   #   'saveDb'\n  #   # ]\n  #   .config [\n  #     '$provide'\n  #     ($provide) ->\n  #       $provide.provider 'saveDb', ->\n  \n  #         urlDefault: 'http://echo.jsontest.com/'\n  \n  #         $get: [\n  #           '$http'\n  #           'log'\n  #           ($http, log) ->\n  #             logHttp = new log 'Provider $http'\n  \n  #             get: (path) ->\n  #               logHttp.log  'Consultando el path:', path, @urlDefault\n  \n  #               $http.get \"#{@urlDefault}#{path}\"\n  \n  #         ]\n  #   ]\n  \n  ### Module bootstrap ###\n  \n  module\n    .module [\n      'ui.bootstrap'\n    ]\n  \n\n  ###  Fin de Modulos  ###\n\n\n\n  #\n  # Include APP\n  # Inicializa la palicación cargando los modulos y la app.\n  # require el nombre definida en las configuraciones\n  #\n  app = angular.module config.app_name, ___components.modules\n\n  # Include All Factorys\n  # _factory_alerts_attac.coffee\n  factory 'alert', ->\n    class alert\n  \n        # Data Alert\n        alerts      : []\n        modelAlert  : {type: 'warning', message: ''}\n  \n        _onLogs: []\n  \n        # Evento para genera un log\n        onLog: (fn) ->\n          @_onLogs.push fn\n  \n        # Function Alert\n        newAlert    : (data) ->\n  \n          # Crea un model de la alerta\n          modelAlert = angular.copy @modelAlert\n  \n          # Asocia los valores a la alerta\n          modelAlert.message = data.msg or data.message if data?.msg? or data?.message?\n          modelAlert.type    = data.type if data?.type?\n  \n          # Genera los logs\n          logs data, modelAlert for logs in @_onLogs\n  \n          # Crea la alerta\n          @alerts.push modelAlert\n  \n        removeAlert : (indexAlert) -> @alerts.splice indexAlert, 1\n  \n    alert\n  \n  # _factory_logs_attac.coffee\n  \n  # Crea estructuas de mensajes\n  #\n  # Example:\n  #\n  # ## Crear una nueva alerta\n  #\n  # ```coffeescript\n  # logModuleUser = new log 'Module User'\n  # ```\n  #\n  # ## Alerta Simple\n  #\n  # ```coffescript\n  # data = [3,67,2]\n  #\n  # logModuleUser.log 'Se muestran los siguientes errores: ', data\n  # ```\n  #\n  # ## Crea una sub alerta\n  #\n  # ```coffeescript\n  # logSubModuloUser = new log 'Sub Modulo', logModuleUser\n  # user = \"Loqui\"\n  #\n  # logSubModuloUser.log 'Se esta cargando el usuario:', user\n  # ```\n  #\n  # ## Crea un alerta de error\n  #\n  # ```coffeescript\n  # logSubModuloUser.error 'No se ha podido cargar el usuario:', user\n  # ```\n  \n  factory 'log', ->\n  \n    aArray = (arrs)->\n      arrReturn = []\n      for index, arr of arrs\n        if Array.isArray arr\n          for indexSArr, SArr of arr\n            arrReturn.push SArr\n        else\n          arrReturn.push arr\n  \n      # console.log arrReturn\n      arrReturn\n  \n  \n  \n    # Genera logs basados\n    ###log54126###\n    class log\n  \n      constructor: (\n        @header     = null,\n        @preModule  = null,\n        @separator  = \" > \",\n        @styles     = {color : \"green\"},\n        @stylesErr  = {color : \"red\"},\n        @virtualLog = console.log\n        ) ->\n  \n  \n      getHeaderArr: ->\n        # [\"%c#{@header}\", (\"#{keyStyle}:#{style};\" for keyStyle, style of @styles)...]\n        [\"#{@header}\"]\n  \n      # Retorna una cabezera con todas las etiqueas del log y de los logs padres\n      createTagLog: ->\n        if @preModule?\n  \n          tags = []\n          tags.push do @preModule.createTagLog\n          tags.push do @getHeaderArr\n  \n        else\n          tags = do @getHeaderArr\n  \n        aArray tags\n  \n      getHeaderInline: ->\n        (\"#{e}\" for e in do @getHeader).join(@separator)\n  \n      getHeader: ->\n  \n        ret = (i for k,i of do @createTagLog)\n        ret\n  \n      getSkeletonHeader: (styles) ->\n  \n        preMsgs = []\n        headerInline = do @getHeaderInline\n        getNewTime = new Date\n  \n        preMsgs.push \"%c[\"\n  \n        if config.log_view_time\n          preMsgs.push \"#{getNewTime.toLocaleTimeString()} #{getNewTime.toLocaleDateString()}#{config.log_simbol_end_time}\"\n  \n        preMsgs.push headerInline\n        preMsgs.push \"]:\"\n  \n        preMsgs = [(\"#{e}\" for e in preMsgs).join(''), (\"#{n}:#{s}\" for n,s of styles).join(';')]\n  \n  \n      log: (msgs...) ->\n        preMsgs = []\n  \n        preMsgs.push (@getSkeletonHeader @styles)...\n        preMsgs.push msgs...\n  \n        if config.dev then console.log.apply console, preMsgs\n  \n      error: (msgs...) ->\n        preMsgs = []\n  \n        preMsgs.push (@getSkeletonHeader @stylesErr)...\n        preMsgs.push msgs...\n  \n        if config.dev then console.log.apply console, preMsgs\n  \n  \n    return log\n  \n  # _factory_messages.coffee\n  \n  factory 'messages', ->\n    module:\n      groups: '[Module Groups]'\n  \n    alerts:\n      error_add_groups: \"\n        Los grupos nos se han podido ingresar a la base de datos,\n        revise los campos en rojo.\n      \"\n  \n  \n  # _factory_models_attac.coffee\n  #\n  # Crea componente para el Model.\n  #\n  # Es capas de administrar distintos tipos de modelos que facilitan el control\n  # de datos basados en multidatos y poder validad cada dato.\n  #\n  \n  factory 'model', ->\n  # app.service 'model', ->\n  \n    class cModel\n  \n      constructor: (model) ->\n        @model = model if model?\n  \n      # Contienes los modelos generados\n      models : []\n  \n      # Contiene el modelo base del objeto\n      model : {}\n  \n      _validates : {}\n  \n      # Instrucciones para validar el modelo\n      validate : (name, fn) ->\n        @_validates[name] = fn\n  \n  \n  \n      # Genera un nuevo modelo basado en una data ingresada\n      add: (dataToModel) ->\n        if not dataToModel?\n          dataToModel = {}\n  \n        preModel = angular.copy @model\n  \n        isPush = false\n  \n        # Recorre el model de la data\n        for indexSPreModel, sPreModel of preModel\n          if dataToModel[indexSPreModel]?\n            isPush = true\n            preModel[indexSPreModel] = dataToModel[indexSPreModel]\n  \n        # Incluye las funciones en el modelo\n        for nameValid, fnValid of @_validates\n          preModel[nameValid] = fnValid\n          # console.log nameValid, preModel\n          # fnValid()\n  \n        if isPush then @models.push preModel\n  \n      # Elimian un modelo asociado\n      remove: (index) ->\n        @models.slice index, 1\n  \n      save: (storage) ->\n  \n        for model in @models\n          for nameValid, fnValid of @_validates\n            delete model[nameValid]\n          # console.log model\n          storage.push model\n  \n  \n    cModel\n  \n  # _factory_serach_fnc.coffee\n  factory 'search', ->\n  \n    class search\n      active  : false\n      actived : -> @active = !@active\n      text    : ''\n      clear   : -> @text = ''\n      exit    : (keyEvent) ->\n        if keyEvent.keyCode is 27\n          @active = false\n          do @clear\n  \n  \n    search\n  \n  # _factory_verific_data_attac.coffee\n  \n  #\n  # Contiene una serie de funciones que permite validar siertos tipos de datos.\n  #\n  # Por ejemplo\n  #\n  # verificData.isEmpty('')\n  #\n  \n  factory 'verificData', ->\n  \n    # Match RegExp\n    domain          = \"[a-zA-Z0-9\\\\.\\\\_\\\\-]+\\\\.[a-zA-Z0-9]+\"\n    email           = \"[a-zA-Z0-9\\\\_\\\\-\\\\.\\\\%]+\\\\@#{domain}\"\n    web             = \"[a-zA-Z0-9\\\\?\\\\$\\\\#\\\\/\\\\:\\\\.\\\\-_%\\\\&]+\"\n    nameEmail       = \"\\\"{0,}([a-zA-Z][a-zA-Z ]+)\\\"{0,}\\\\s{0,}<(#{email})>\"\n    nameEmailWeb    = \"#{nameEmail}[\\\\s]{0,}\\\\((#{web})\\\\)\"\n    emailWeb        = \"<(#{email})>[\\\\s]{0,}\\\\((#{web})\\\\)\"\n    nameAndLastName = \"\\\"{0,}([a-zA-Z]+)([a-zA-Z ]+)\\\"{0,}\"\n  \n    regexp:\n      email           : email\n      nameEmail       : nameEmail\n      nameEmailWeb    : nameEmailWeb\n      emailWeb        : emailWeb\n      nameAndLastName : nameAndLastName\n  \n    isEmpty: (value) ->\n      !value\n  \n    useSymbol: (symbol, value) ->\n      valueFindSymbol = value?.indexOf? symbol\n      valueWithSymbol = valueFindSymbol isnt -1 and valueFindSymbol isnt undefined\n  \n      valueWithSymbol\n  \n    isEmail: (value) ->\n      Boolean /^[a-zA-Z0-9\\._%\\+\\-]+@[a-zA-Z0-9\\-\\+]+\\.[a-zA-Z0-9]+$/ig.exec value\n  \n\n\n  # Load Provider\n  # _provider_save_db.coffee\n  \n  # saveDbProvidwer\n  # provider 'saveDb',\n  #   ->\n  #     title = 3\n  \n  #     $get: ->\n  #       title: 'saveDb'\n  \n\n\n  ### Carga la aplicación ###\n  ### Controladores ###\n  \n  controller = (name_controller, modules_param, fn_controller) ->\n    modules_param.push fn_controller\n    app.controller name_controller, modules_param\n  # _controller_add_group.coffee\n  \n  # Controlador par agregar un nuevo grupo.\n  \n  # - Mantener un listado temporal.\n  # - Editar Listado temporal.\n  # - Guardar en el listado general.\n  # - Guardar en la base de datos.\n  \n  controller 'add_group', [\n    '$scope'\n    '$log'\n    '$rootScope'\n    'messages'\n    'log'\n    'alert'\n    'verificData'\n    'controlActivities'\n    ], ($scope, $log, $rootScope, messages, log, alert, verificData, controlActivities) ->\n      # Parámetros de configuración del Modulo\n      $scope.type = 'group'\n      $scope.is   = (type) -> $scope.type == type\n  \n      logAddGroup        = new log 'Module Grups Add'\n      logSaveGroups      = new log 'Save Groups', logAddGroup\n      logValidationGroup = new log 'Validate Group', logAddGroup\n      logRemoveAlerts    = new log 'Remove Alerts', logAddGroup\n  \n      # Change Title\n      $rootScope.title = 'Nuevo grupo'\n  \n      $scope.alerts      = []\n      $scope.alertsFixed = []\n      indexAlerts =\n        keyAlertDanger: -1\n      $scope.removeAlert      = removeAlert      = (indexAlert) ->\n        logRemoveAlerts.log \"Eliminando la alerta en la posición\", indexAlert\n        $scope.alerts.splice indexAlert, 1\n      $scope.removeAlertFixed = removeAlertFixed = (indexAlert) ->\n        logRemoveAlerts.log \"Eliminando la alerta fija en la posición\", indexAlert\n        $scope.alertsFixed.splice indexAlert, 1\n  \n      clearAlertsFixed = ->\n        removeAlertFixed indexAlert for indexAlert, alert of $scope.alertsFixed\n  \n  \n  \n      $scope.data =\n        groupsAdd: [] # Grupos para agregar.\n  \n  \n  \n      # Funciones para validaciones\n      ruleValidaIfExistsOnGroups = (keyGroup) ->\n        existGroup = false\n        for _keyGroup, group of $rootScope.groups\n          existGroup = true if group.key is keyGroup\n        !existGroup\n  \n      ruleValidaIfExistsOnLocalGroups = (keyGroup) ->\n        countExistGroup = 0\n        for _keyGroup, group of $scope.data.groupsAdd\n          countExistGroup = countExistGroup + 1 if group.key is keyGroup\n  \n        if countExistGroup <= 1 then true\n        else false\n  \n      ruleValidationIfCorrectSyntaxKeyGroup = (keyGroup) ->\n        expressionRun = ///\n          ^\n            [\n              a-z\n              0-9\n              _\n              -\n            ]+\n          $\n        ///gi\n        isCorrectTheRegularExpression = expressionRun.exec keyGroup\n        # logValidationGroup.log \"Resultado de la búsqueda\", expressionRun, \"es\", isCorrectTheRegularExpression, \"de\", keyGroup\n  \n        Boolean isCorrectTheRegularExpression\n  \n      validationGroup = (group) ->\n        isValid = true\n  \n        isValid = false if not ruleValidaIfExistsOnGroups group.key\n        isValid = false if not ruleValidaIfExistsOnLocalGroups group.key\n        isValid = false if not ruleValidationIfCorrectSyntaxKeyGroup group.key\n  \n        isValid\n  \n  \n  \n      isValidGroupKey = (group) ->\n        isEmpty      = verificData.isEmpty group.key\n        isValidGroup = validationGroup (group)\n        # logValidationGroup.log \"Group Key:\", group.key, \"| Validation success isValidGroup:\", isValidGroup, \"Is Empty:\", isEmpty\n  \n        if isEmpty then false\n        else if isValidGroup then true\n        else false\n  \n  \n  \n      isDangerGroupKey = (group) ->\n        isEmpty      = verificData.isEmpty group.key\n        isValidGroup = validationGroup (group)\n        # logValidationGroup.log \"Validation Danger isValidGroup:\", isValidGroup, \"Is Empty\", isEmpty\n  \n        if isEmpty then false\n        else if not isValidGroup then true\n  \n  \n  \n      # Barra de procesos\n      progressbarPropieties =\n        max    : 100\n        status : false # Activado o Desactivado\n        text   : ''\n        type   : \"default\"\n        value  : 100\n  \n  \n  \n      saveAllGroupsAdds = ->\n        captureGroups = $scope.data.groupsAdd\n  \n        activitySaveAllGroups = controlActivities.get 'save_all_groups'\n  \n        gruposListosParaGuardar = ({key: group.key, name: group.name} for key, group of captureGroups when isValidGroupKey group)\n        gruposErroneos          = (group.key for key, group of captureGroups when isDangerGroupKey group)\n  \n  \n  \n        do clearAlertsFixed\n  \n  \n  \n        # Si existe a lo menos un grupo con errores\n        if gruposErroneos.length > 0\n          logSaveGroups.error \"Se encontraron que los grupos con la claves\", gruposErroneos, \"no se pueden ingresar.\"\n  \n          stringGruposErroneos = (\"\\\"#{grupoKey||''}\\\"\" for grupoKey in gruposErroneos).join(\", \")\n  \n          indexAlerts.keyAlertDanger = 1 - $scope.alertsFixed.push\n            type: \"danger\"\n            message: \"\n              <strong>Advertencia:</strong> Los grupos #{stringGruposErroneos} no\n              nos son posible agregarlos debido a que puede estar replicados o mal\n              escrito.\n              <br>\n              <strong>Nota:</strong> <i>Por favor revisar los campos en rojo.</i>\n              \"\n  \n  \n  \n        # Si existe a lo menos un grupo ara guardar\n        else if gruposListosParaGuardar.length > 0\n          logSaveGroups.log \"Están listo para agregar los grupos\", (group.key for group in gruposListosParaGuardar)\n  \n          activitySaveDbGroups = controlActivities.get 'activity_save_db_groups'\n  \n  \n  \n          # Almacena en la base de datos\n          $rootScope.db.groups = gruposListosParaGuardar\n  \n          $scope.statusLoadSaveGroup = true\n  \n          activitySaveDbGroups.callback ->\n  \n            $scope.statusLoadSaveGroup = false\n  \n            indexAlerts.keyAlertCompleteUploadData = 1 - $scope.alertsFixed.push\n              type: \"success\"\n              message: \"\n                Los datos han sido guardados correctamente. Visita los <a href=\\\"#/groups\\\" class=\\\"alert-link\\\">grupos</a>\n                para revisar los grupos que acabas de ingresar.\n              \"\n  \n  \n          logSaveGroups.log \"Limpiando la data local de los grupos. Eliminado\", captureGroups.length, \"datos.\"\n  \n  \n        # Si no existe ningún grupo.\n        else\n          $scope.alerts.push\n            type: \"warning\"\n            message: \"\n              <strong>Advertencia:</strong> No existe ningún grupo para agregar.\n            \"\n  \n  \n        activitySaveAllGroups.end()\n  \n      # if config.dev\n      #   $scope.data.groupsAdd.push\n      #     key: \"name_1\"\n  \n  \n  \n      $scope.hsA = controlActivities.getHistory\n  \n  \n      $scope.dangerKey   = isDangerGroupKey\n      $scope.progressbar = progressbarPropieties\n      $scope.save        = saveAllGroupsAdds\n      $scope.validateKey = isValidGroupKey\n  \n  \n  # _controller_add_permission.coffee\n  controller 'add_permission', [\n    '$scope'\n    '$log'\n    ], ($scope, $log) ->\n      # Parámetros de configuración del Modulo\n      $scope.type = 'permission'\n      $scope.is   = (type) -> $scope.type == type\n  \n  # _controller_add_user.coffee\n  controller 'add_user', [\n    '$scope'\n    '$rootScope'\n    'log'\n    'verificData'\n    '$http'\n    ], ($scope, $rootScope, log, verificData, $http) ->\n      # Parámetros de configuración del Modulo\n      $scope.type     = 'user'\n      $scope.is       = (type) -> $scope.type == type\n      # $scope.newUserToAdd = -> $scope.data.usersAdd.push {}\n      $scope.data     =\n        usersAdd : []\n        usersAddlongText : \"\"\n        regexToFindEmails: \"#{verificData.regexp.emailWeb}|#{verificData.regexp.nameEmailWeb}|#{verificData.regexp.nameEmail}|#{verificData.regexp.email}\"\n  \n  \n      if config.dev\n        $scope.data.usersAddlongText = \"\"\"\n          name1@d.co,\n          name2@d.co,\n          nombre apellido segundo apellido <name3@do.co>,\n          nombre Apellido<name4@d.c> (http://el.sitio/)\n          nombre Apellido <name5@b.e>(http://el.sitio/)\n          <name6@b.e> (http://el.sitio/)\n          \"\"\"\n  \n  \n      $scope.typeInvitation = 'single' # 'bulk' or 'single'\n  \n      $scope.toBulk = ->\n        $scope.typeInvitation = 'bulk'\n  \n      $scope.toSingle = ->\n        $scope.typeInvitation = 'single'\n  \n  \n  \n      logAddUser                = new log 'Module User Add'\n      logSaveUsers              = new log 'Save User', logAddUser\n      logCatchingEmailsToAdd    = new log 'Catching Emails', logAddUser\n      logParseStringToEmailList = new log 'Parset Email List', logCatchingEmailsToAdd\n  \n  \n  \n      $scope.users = $rootScope.users\n      logAddUser.log 'Datos cargados desde la variable \\'users\\' ($rootScope) a variable \\'users\\' ($scope):', $scope.users\n  \n  \n  \n      matchesFind = () ->\n        regexToFindEmails = new RegExp $scope.data.regexToFindEmails, \"g\"\n        resultMatchesRegExp = $scope.data.usersAddlongText.match regexToFindEmails\n        $scope.data.regexpEnd = resultMatchesRegExp\n  \n        logCatchingEmailsToAdd.log 'Capturando Emails usando el Regex', regexToFindEmails, 'Retornando: ', resultMatchesRegExp\n  \n  \n  \n      $scope.$watch 'data.usersAddlongText', matchesFind\n      $scope.$watch 'data.regexToFindEmails', matchesFind\n  \n  \n  \n      # Validaciones del formulario\n      successValidation = {\n        email: (data) ->\n          email = data.email\n  \n          if verificData.isEmpty email\n            return false\n  \n          if verificData.isEmail email\n            true\n          else\n            false\n      }\n  \n      # Validaciones de formulario para validar datos herroneos\n      dangerValidation = {\n        email: (data) ->\n          email = data.email\n          if verificData.isEmpty email\n            return false\n  \n          if verificData.isEmail email\n            false\n          else\n            true\n      }\n  \n  \n  \n      bulkEmailToListAccounts = ->\n        # RegExp\n        matchEmailAndName    = new RegExp verificData.regexp.nameEmail\n        matchEmailAndWeb     = new RegExp verificData.regexp.emailWeb\n        matchEmailNameAndWeb = new RegExp verificData.regexp.nameEmailWeb\n        matchNameAndLastName = new RegExp verificData.regexp.nameAndLastName\n        matchOnlyEmail       = new RegExp verificData.regexp.email\n  \n        listaDeContactosEncontrados = $scope.data.regexpEnd\n  \n        logParseStringToEmailList.log \"Lista de contactos encontrados\", listaDeContactosEncontrados\n  \n        logParseStringToEmailList.log \"Clasificando\", listaDeContactosEncontrados.length, \"Contactos.\"\n  \n        contactosConNombreEmailYWeb = []\n        contactosConNombreYEmail    = []\n        contactosConEmailYWeb       = []\n        contactosSoloEmail          = []\n  \n        for contacto in listaDeContactosEncontrados\n          isEmailNameAndWeb = contacto.match matchEmailNameAndWeb\n          isEmailAndName    = contacto.match matchEmailAndName\n          isEmailAndWeb     = contacto.match matchEmailAndWeb\n          isOnlyEmail       = contacto.match matchOnlyEmail\n  \n          if isEmailNameAndWeb\n            contactosConNombreEmailYWeb.push contacto\n          else if isEmailAndWeb\n            contactosConEmailYWeb.push       contacto\n          else if isEmailAndName\n            contactosConNombreYEmail.push    contacto\n          else if isOnlyEmail\n            contactosSoloEmail.push          contacto\n  \n  \n        logParseStringToEmailList.log \"Los contactos con Nombre Email y Sitio web encontrados\", contactosConNombreEmailYWeb\n        logParseStringToEmailList.log \"Los contactos con Nombre y Email encontrados\", contactosConNombreYEmail\n        logParseStringToEmailList.log \"Los contactos con Email y Web encontrados\", contactosConEmailYWeb\n        logParseStringToEmailList.log \"Los contactos solo con Email\", contactosSoloEmail\n  \n        logParseStringToEmailList.log \"Los usuarios encontrados fueron\",\n          contactosConNombreEmailYWeb.length +\n          contactosConNombreYEmail.length +\n          contactosConEmailYWeb.length +\n          contactosSoloEmail.length\n  \n  \n        tmpMemoriaDeContactosParaAgregar = []\n  \n        # Modelo {name,lastname,email,web}\n        for contacto in contactosSoloEmail\n          tmpMemoriaDeContactosParaAgregar.push\n            email: contacto\n  \n        for contacto in contactosConEmailYWeb\n          RegExpResult   = contacto.match matchEmailAndWeb\n          emailCapturado = RegExpResult[1] # Captura el email\n          webCapturado   = RegExpResult[2] # Captura el Sito web\n  \n          tmpMemoriaDeContactosParaAgregar.push\n            email : emailCapturado\n            web   : webCapturado\n  \n        for contacto in contactosConNombreYEmail\n          RegExpResult    = contacto.match matchEmailAndName\n          nombreCapturado = RegExpResult[1]\n          emailCapturado  = RegExpResult[2]\n  \n          # Divide el nombre del Apellido\n          RegExpResultNameAndLastname = nombreCapturado.match matchNameAndLastName\n          firstName = RegExpResultNameAndLastname[1]\n          lastName  = RegExpResultNameAndLastname[2]\n  \n  \n          tmpMemoriaDeContactosParaAgregar.push\n            name  : firstName\n            lastname : lastName\n            email : emailCapturado\n  \n        for contacto in contactosConNombreEmailYWeb\n          RegExpResult    = contacto.match matchEmailNameAndWeb\n          nombreCapturado = RegExpResult[1]\n          emailCapturado  = RegExpResult[2]\n          webCapturado    = RegExpResult[3]\n  \n          # Divide el nombre del Apellido\n          RegExpResultNameAndLastname = nombreCapturado.match matchNameAndLastName\n          firstName = RegExpResultNameAndLastname[1]\n          lastName  = RegExpResultNameAndLastname[2]\n  \n  \n          tmpMemoriaDeContactosParaAgregar.push\n            name  : firstName\n            lastname : lastName\n            email : emailCapturado\n            web   : webCapturado\n  \n  \n        logParseStringToEmailList.log \"Memoria temporal previa a ingresar a la lista\", tmpMemoriaDeContactosParaAgregar\n  \n        # Agregando todos los cantos a la lista final\n        tmpMemoriaDeContactosParaAgregar = tmpMemoriaDeContactosParaAgregar.reverse()\n        $scope.data.usersAdd = []\n  \n        for contacto in tmpMemoriaDeContactosParaAgregar\n          $scope.data.usersAdd.push contacto\n  \n        # Cambiar a vista simple\n        do $scope.toSingle\n  \n  \n  \n      # Evento para guardar los eventos en la base de datos\n      save = ->\n        dataNewUsers = $scope.data.usersAdd\n        logSaveUsers.error 'Base para los usuarios a agregar', dataNewUsers\n  \n  \n  \n      $scope.bulkEmailToListAccounts = bulkEmailToListAccounts\n      $scope.save                    = save\n      $scope.d                       = dangerValidation\n      $scope.v                       = successValidation\n  \n  # _controller_adds.coffee\n  controller 'addsCtrl', [\n    '$scope'\n    '$routeParams'\n    '$location'\n    ],\n    ($scope, $routeParams, $location) ->\n  \n      $scope.tab = tab = $routeParams.type_adds\n  \n      # console.log $scope\n  \n  \n  \n  \n  ### Gestiona los permisos ###\n  controller 'AppCtrl', [\n    '$scope'\n    '$rootScope'\n    '$log'\n    'log'\n    'controlActivities'\n    '$sails'\n    ],\n    ($scope, $rootScope, $log, log, controlActivities, $sails) ->\n      $rootScope.title = 'Ajenjo'\n  \n      logChageGlobalData     = new log 'Change Data', logSaveGlobalData\n      logControllerApp       = new log 'Ctrl APP'\n      logSaveGlobalData      = new log 'Save Global Data', logControllerApp\n      logStatusConnectionApp = new log 'Status connection', logControllerApp\n  \n  \n  \n      # Control de estado, si se precenta la aplicacion conectada o no. Permite\n      # leer una variable global que identifica su estado.\n      do ->\n        sinEstado    = -1\n        desconectado = 0\n        conectado    = 1\n  \n        timeToTimeoutConnect = config.sails_time_to_declare_disconect\n  \n        $rootScope.appIsConnect = sinEstado\n  \n        setAppInDisconectOfTiemOut = ->\n          if $rootScope.appIsConnect is sinEstado\n            $rootScope.appIsConnect = desconectado\n            logStatusConnectionApp.log \"Se cambio el estado de la aplicación debido a no estar conectado en\", timeToTimeoutConnect, \"segundos.\"\n            try do $rootScope.$apply\n  \n        setTimeout setAppInDisconectOfTiemOut, timeToTimeoutConnect\n  \n        # $rootScope.appIsConnect = desconectado\n        $sails.on 'connect', () ->\n          logStatusConnectionApp.log \"Se ha conectado la aplicación.\"\n          $rootScope.appIsConnect = conectado\n  \n        $sails.on 'disconnect', () ->\n          logStatusConnectionApp.log \"Esta ha desconectado la aplicación.\"\n          $rootScope.appIsConnect = desconectado\n  \n  \n  \n      $sails.on 'message_test', (req) ->\n        logControllerApp.log \"Se ha recibido un estatus de parte del backend este dice:\", req.text\n  \n  \n  \n      logControllerApp.log 'El modo de desarrollador esta activo.'\n  \n  \n  \n      # Include data Groups\n      groups = [\n        {\n          key: 'abc1231'\n          name: 'Administradores'\n          description: 'Lorem ipsum dolor sit amet...'\n        }\n        {\n          key: 'abc1232'\n          name: 'Usuarios'\n          description: 'Lorem ipsum dolor sit amet...'\n        }\n        {\n          key: 'abc1233'\n          name: 'Otros'\n          description: 'Lorem ipsum dolor sit amet...'\n        }\n      ]\n      \n  \n      if not groups? then groups = []\n  \n      # Include data Users\n      users = [\n        {\n          id: 1\n          name: 'F Name 1'\n          username: 'user1'\n        }\n        {\n          id: 2\n          name: 'F Name 2'\n          username: 'user2'\n        }\n        {\n          id: 3\n          name: 'F Name 3'\n          username: 'user3'\n        }\n        {\n          id: 4\n          name: 'F Name 4'\n          username: 'user4'\n        }\n        {\n          id: 5\n          name: 'F Name 5'\n          username: 'user5'\n        }\n        {\n          id: 6\n          name: 'F Name 6'\n          username: 'user6'\n        }\n        {\n          id: 7\n          name: 'F Name 7'\n          username: 'user7'\n        }\n      ]\n      \n  \n      if not users? then users = []\n  \n      # Include data Permissions\n      permissions = [\n        {\n          key: 'permission_01'\n          description: 'Explicabo modi aspernatur temporibus laborum. Sequi maiores numquam ad ab'\n        }\n        {\n          key: 'permission_02'\n          description: 'Distinctio earum beatae explicabo tenetur quibusdam pariatur molestiae, voluptatibus numquam'\n        }\n        {\n          key: 'permission_03'\n          description: 'Enim corporis omnis, sed facilis iure cumque aspernatur earum fugit'\n        }\n        {\n          key: 'permission_04'\n          description: 'Dicta odit veritatis, officia quisquam nemo quam maiores soluta.'\n        }\n        {\n          key: 'permission_05'\n          description: 'Non earum alias aliquam magnam natus consectetur sequi facilis, optio'\n        }\n        {\n          key: 'permission_06'\n          description: 'Minus hic porro reiciendis est architecto temporibus aliquam quae voluptates itaque'\n        }\n        {\n          key: 'permission_07'\n          description: 'Est voluptate, dolor excepturi qui repellendus ex asperiores enim eaque'\n        }\n        {\n          key: 'permission_08'\n          description: 'Iste inventore, doloremque officiis repellendus officia voluptas nesciunt maiores quo'\n        }\n        {\n          key: 'permission_09'\n          description: 'Rerum nobis fuga sunt perspiciatis cumque cupiditate possimus impedit omnis incidunt'\n        }\n        {\n          key: 'permission_10'\n          description: 'Cumque sint dicta eveniet repudiandae ex vel autem, vero ipsam'\n        }\n        {\n          key: 'permission_11'\n          description: 'Quia neque necessitatibus tempora expedita architecto. Eaque voluptatem praesentium unde'\n        }\n        {\n          key: 'permission_12'\n          description: 'Iste modi porro ex fugit, eius incidunt aperiam accusamus quasi'\n        }\n      ]\n      \n  \n      if not permissions? then permissions = []\n  \n      # Variables\n      $rootScope.groups      = groups\n      $rootScope.permissions = permissions\n      $rootScope.users       = users\n  \n  \n  \n  \n  \n      # DB control\n      # _save_db_control.coffee\n      \n      # Parent _controller_app.coffee\n      \n      changeDataOficialByDB = (strNameData, data) ->\n        dataGlobal = $rootScope[strNameData] || []\n      \n        logChageGlobalData.log \"Data:\", \"\\\"#{strNameData}\\\"\" ,\"Contiene:\", dataGlobal\n      \n        logChageGlobalData.log \"Leyendo data\", data, \"e ingresando al la data global \\\"#{strNameData}\\\".\"\n      \n        dataGlobal.push dataValue for indexDataValue, dataValue of data\n      \n        #\n        # /!\\ Proceso de base de datos, almacenamiento y control de datos existentes.\n        #\n      \n      \n      \n      # Declarando las Memorias de la db Temporal\n      $rootScope.db =\n        groups: []\n      \n      \n      # Control de actualizacion a la base de datos\n      #\n      # Objetivo: al actualizar el contenido en la variable rootScope.db.<data>,\n      # este se almacene en la base de datos.\n      $rootScope.$watch 'db.groups', changeDataGroups = (newData, oldData) ->\n      \n        countGroupToDB = 0\n        countGroupToDB++ for group in $rootScope.db.groups\n      \n        if countGroupToDB > 0 # si existe a los menos un valor\n          activitySaveDbGroups = controlActivities.get 'activity_save_db_groups'\n      \n      \n          # Almacena de forma local los datos\n          changeDataOficialByDB('groups', newData)\n      \n          logSaveGlobalData.log \"Limpiando data 'groups' temporal de la db (\\\"db.groups\\\").\"\n          $rootScope.db.groups = []\n      \n      \n          do activitySaveDbGroups.end\n          do $rootScope.$apply\n      \n      \n      \n  \n  \n  \n  \n  \n  \n  \n  # _controller_groups.coffee\n  \n  controller 'groupsCtrl', [\n    '$scope'\n    '$rootScope'\n    'search'\n    ],\n    ($scope, $rootScope, search) ->\n      $scope.groups = $rootScope.groups\n  \n      # Init Search\n      $scope.search = new search\n  \n  \n  \n  # _controller_navbar-item.coffee\n  controller 'navbarCtrl', [\n    '$scope'\n    '$location'\n    ],\n    ($scope, $location) ->\n      $scope.$location = $location\n  \n  # _controller_permissions.coffee\n  \n  controller 'permissionCtrl', [\n    '$scope'\n    '$rootScope'\n    'search'\n    ],\n    ($scope, $rootScope, search) ->\n      $scope.permissions = $rootScope.permissions\n  \n      # Init Search\n      $scope.search = new search\n  \n  \n  \n  # _controller_users.coffee\n  \n  controller 'usersCtrl', [\n    '$scope'\n    '$rootScope'\n    'log'\n    'search'\n    ], ($scope, $rootScope, log, search) ->\n      $scope.type = 'user'\n      $scope.is   = (type) -> $scope.type == type\n  \n      # Init Search\n      $scope.search = new search\n  \n      logModuleUser = new log 'Module User'\n  \n      $scope.users = $rootScope.users\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  ### End Comtroladores ###\n  \n\n  ### Fin de Carga la aplicación ###\n  # _directive_activePath.coffee\n  \n  # directive 'activePath', ->\n  #   controller: [\n  #     '$scope'\n  #     '$location'\n  #     '$rootScope'\n  #     '$element'\n  #     ($scope, $location, $rootScope, $element) ->\n  #       console.log $element\n  #       $scope.$on '$routeChangeSuccess', (current) ->\n  #         console.log 'current'\n  #         $scope.path = $location.path()\n  #   ]\n  \n  # _directive_boxSearch.coffee\n  #\n  # Permite obtener valores que requieren de multiples valores.\n  #\n  # Example:\n  # <div form-repeat-element=\"data\">\n  #     <div form-repeat-element-singular>\n  #         Nombre\n  #         <input form-repeat-element-value name=\"name\" type=\"text\" value=\"\">\n  #     </div>\n  # </div>\n  #\n  # Return Example:\n  # data = [\n  #     {\n  #         \"name\" : \"Juan\"\n  #     },\n  #     {\n  #         \"name\" : \"Diego\"\n  #     }\n  # ]\n  #\n  \n  # Esta diractiva es capas de manejar los datos con los que se alimanta\n  directive 'formRepeatElement', () ->\n  \n    restrict: 'EA'\n    # replace: false\n  \n    scope:\n      fnNew: \"=\"\n      ___min: \"=minInit\"\n      ___data: \"=ngModel\"\n  \n    require: []\n  \n    link: ($scope, $element, $attrs) ->\n  \n    controller: [\n      '$scope'\n      '$attrs'\n      ($scope, $attrs) ->\n        ___addToData = -> $scope.___data.push {}\n  \n        $scope.fnNew = ->\n          do ___addToData\n  \n  \n        # console.log\n        if $scope.___data is undefined\n          $scope.___data = []\n  \n        # Si el numero de reviciones es mayor a la cantidad de datos, este crese.\n        $scope.$watch '___min', (newData, oldData) ->\n          nRepeatAddToData = (($scope.___min || 1) + 1) - ($scope.___data.length)\n  \n          if nRepeatAddToData > 1\n            while nRepeatAddToData -= 1\n              do ___addToData\n  \n    ]\n  \n    template: (element, attr) ->\n      return \"<span class=\\\"form-single-element\\\" ng-repeat=\\\"#{attr.nameData||'$$data'} in ___data\\\">#{element.html()}</span>\"\n  \n  directive 'formSingleElement', ->\n    restrict: 'C'\n    scope: false\n    controller: [\n      '$scope'\n      ($scope) ->\n        $$isMidlle = ->\n          if not do $$isFotter and not do $$isHeader\n            true\n          else\n            false\n        $$isFotter = ->\n          ($scope.$parent.___data.length - 1) is $scope.$index\n        $$isHeader = ->\n          $scope.$index == 0\n  \n        $scope.$$isFotter = $$isFotter\n        $scope.$$isHeader = $$isHeader\n        $scope.$$isMidlle = $$isMidlle\n  \n    ]\n  \n  directive 'formRemoveElement', ->\n    restrict: 'EA'\n    scope: false\n    controller: [\n      \"$scope\"\n      ($scope) ->\n        $scope.$$remove = ->\n          $scope.$parent.$parent.___data.splice($scope.$index, 1)\n          # console.log \"Remove element #{}\",\n  \n    ]\n  \n  # _directive_controlActivities.coffee\n  directive 'controlActivities', () ->\n    # restrict: \"E\"\n  \n    controller: [\n      'controlActivities'\n      '$scope'\n      'log'\n      (controlActivities, $scope, log) ->\n  \n        logControlActivities = new log 'Control Activities'\n  \n        $scope.existsActivities   = controlActivities.existsActivities\n        $scope.percent            = controlActivities.getPercent\n  \n        $scope.countActivities    = controlActivities.count\n        # $scope.createdActivities  = controlActivities.created\n        $scope.history                = controlActivities.getHistory\n        # $scope.finishedActivities = controlActivities.finished\n        # $scope.progress           = controlActivities.progress\n  \n    ]\n  \n  \n\n\n  #\n  # Carga las configuraciones de los componentes\n  #\n  for k, mconfig of ___components.configs\n    app.config mconfig\n\n\n\nconsole.log \"-- End Runing --\" if config.dev\n\nconsole.log \"%c\", \"\n  padding:3px 174px;\n  line-height: 20px;\n  background-repeat:no-repeat;\n  background-size: auto 100%;\n  background-position:button left;\n  background-image: url(\\\"#{location.protocol}//#{location.host}#{new RegExp('.{0,}/').exec(location.pathname)}/imgs/logo348.png\\\");\n\" if config.dev or config.presentation\n"],"sourceRoot":"/source/"}